import maya.cmds as cmds
import os

# Set your directory path where you want to save the FBX files
directory_path = '/path/to/your/directory'  # e.g., 'C:/exports/'

# Ensure the directory exists
if not os.path.exists(directory_path):
    os.makedirs(directory_path)

# List all objects whose name starts with "Cell_"
cell_objects = cmds.ls("Cell_*")

# Iterate through each object
for obj in cell_objects:
    # Select the object
    cmds.select(obj)
    
    # Define the path to the file
    fbx_path = os.path.join(directory_path, f"{obj}.fbx")
    
    # Export the selected object to an FBX file
    cmds.file(fbx_path, force=True, options="v=0;", type="FBX export", exportSelected=True)
    
    print(f"Exported {obj} to {fbx_path}")

print("Exporting done.")

import maya.cmds as cmds

def create_slice_mesh_ui():
    window_name = "sliceMeshWindow"
    if cmds.window(window_name, exists=True):
        cmds.deleteUI(window_name)

    cmds.window(window_name, title="Slice Mesh")
    cmds.columnLayout(adjustableColumn=True)
    cell_size_field = cmds.floatFieldGrp(label="Cell Size", numberOfFields=1, value1=5)
    auto_remove_seams_checkbox = cmds.checkBox(label="Auto Remove Seams", value=True)
    blend_threshold_field = cmds.floatSliderGrp(label="Blend Threshold", field=True, minValue=0, maxValue=1, value=0, step=0.01)
    
    # Spacer
    cmds.separator(height=10, style='none')  # Adds a small space after the buttons
    
    # Directory path field
    directory_field = cmds.textFieldButtonGrp(label='Directory Path', buttonLabel='Browse...', 
        text='/path/to/your/directory')  # Default path can be changed
    
    # Define the browse directory function
    def browse_directory(*args):
        # Use Maya's file dialog to choose a directory
        directory = cmds.fileDialog2(dialogStyle=2, fileMode=3)
        if directory:
            cmds.textFieldButtonGrp(directory_field, edit=True, text=directory[0])

    # Attach the browse function to the directory field's button
    cmds.textFieldButtonGrp(directory_field, edit=True, buttonCommand=browse_directory)

    # Function to wrap the FBX export logic
    def export_fbx_wrapper(*args):
        # Retrieve the directory path from the text field
        directory_path = cmds.textFieldButtonGrp(directory_field, query=True, text=True)
        # Your FBX export logic here, using the directory_path variable
        print("Export FBX to: " + directory_path)

    cmds.button(label="Slice Mesh", command=slice_mesh_wrapper)
    cmds.button(label="Place Selection Into Cells", command=place_cells_wrapper)
    cmds.separator(height=10, style='none')  # Adds another small space before the next button
    cmds.button(label="Export FBX", command=export_fbx_wrapper)

    cmds.showWindow(window_name)

# The functions called by the buttons
def slice_mesh(cell_size, auto_remove_seams, blend_threshold):
    # Slice mesh logic here
    print("Slicing mesh...")

def place_selection_into_cells():
    # Place selection into cells logic here
    print("Placing selection into cells...")

# Function wrappers
def slice_mesh_wrapper(*args):
    cell_size = cmds.floatFieldGrp(cell_size_field, query=True, value1=True)
    auto_remove_seams = cmds.checkBox(auto_remove_seams_checkbox, query=True, value=True)
    blend_threshold = cmds.floatSliderGrp(blend_threshold_field, query=True, value=True) 
    slice_mesh(cell_size, auto_remove_seams, blend_threshold)
    
def place_cells_wrapper(*args):
    place_selection_into_cells()

# Call the function to create the UI
create_slice_mesh_ui()
